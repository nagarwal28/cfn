{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Provision the required resources for your blog post example 'Add domain filtering to your NAT instance with Squid'. Wait for the creation to complete before testing.",
	"Parameters": {
		"MyKeyPair": {
			"Type":"AWS::EC2::KeyPair::KeyName",
			"Description":"Choose a key pair to logon the EC2 instances"
		}
	},
	"Mappings":{
		"RegionMap" : {
			"us-east-1"      : { "64" : "ami-60b6c60a"},
			"us-west-2"      : { "64" : "ami-f0091d91"},
			"us-west-1"      : { "64" : "ami-d5ea86b5"},
			"eu-west-1"      : { "64" : "ami-bff32ccc"},
			"eu-central-1"   : { "64" : "ami-bc5b48d0"},
			"ap-southeast-1" : { "64" : "ami-c9b572aa"},
			"ap-northeast-1" : { "64" : "ami-383c1956"},
			"sa-east-1"      : { "64" : "ami-6817af04"},
			"ap-southeast-2" : { "64" : "ami-48d38c2b"}
		}
	},
	"Resources": {
		"VPC": {
			"Type" : "AWS::EC2::VPC",
			"Properties" : {
				"CidrBlock" : "10.0.0.0/24",
				"Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
			}
		},
		"InternetGateway": {
			"Type" : "AWS::EC2::InternetGateway",
			"Properties" : {
        		"Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
			}
		},
		"AttachGateway": {
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"InternetGatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"NetworkAcl": {
			"Type" : "AWS::EC2::NetworkAcl",
			"Properties" : {
				"VpcId" : {"Ref" : "VPC"},
				"Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
			}
		},
		"NetworkAclIngressEntry": {
			"Type" : "AWS::EC2::NetworkAclEntry",
			"Properties" : {
				"NetworkAclId" : {"Ref" : "NetworkAcl"},
				"RuleNumber" : "100",
				"Protocol" : "-1",
				"RuleAction" : "allow",
				"Egress" : "false",
				"CidrBlock" : "0.0.0.0/0"
			}
		},
		"NetworkAclEgressEntry": {
			"Type" : "AWS::EC2::NetworkAclEntry",
			"Properties" : {
				"NetworkAclId" : {"Ref" : "NetworkAcl"},
				"RuleNumber" : "100",
				"Protocol" : "-1",
				"RuleAction" : "allow",
				"Egress" : "true",
				"CidrBlock" : "0.0.0.0/0"
			}
		},
		"PrivateSubnet": {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"CidrBlock" : "10.0.0.0/25",
				"Tags" : [
					{"Key" : "Name", "Value" : "Private Subnet" },
					{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
				]
			}
		},
		"PublicSubnet": {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"CidrBlock" : "10.0.0.128/25",
				"MapPublicIpOnLaunch": "True",
				"Tags" : [
					{"Key" : "Name", "Value" : "Public Subnet" },
					{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
				]
			}
		},
		"PrivateSubnetNaclAssociation": {
			"Type" : "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "PrivateSubnet" },
				"NetworkAclId" : { "Ref" : "NetworkAcl" }
			}
		},
		"PublicSubnetNaclAssociation": {
			"Type" : "AWS::EC2::SubnetNetworkAclAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "PublicSubnet" },
				"NetworkAclId" : { "Ref" : "NetworkAcl" }
			}
		},
		"PublicRouteTable": {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId" : {"Ref" : "VPC"},
				"Tags" : [
					{"Key" : "Name", "Value" : "Public Route Table" },
					{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
				]
			}
		},
		"PublicRouteTableEntry": {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : "AttachGateway",
			"Properties" : {
				"RouteTableId" : { "Ref" : "PublicRouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"PublicRouteTableSubnetAssociation": {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "PublicSubnet" },
				"RouteTableId" : { "Ref" : "PublicRouteTable" }
			}
		},
		"PrivateRouteTable": {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId" : {"Ref" : "VPC"},
				"Tags" : [
					{"Key" : "Name", "Value" : "Private Route Table" },
					{"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} }
				]
			}
		},
		"PrivateRouteTableEntry": {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : "AttachGateway",
			"Properties" : {
				"RouteTableId" : { "Ref" : "PrivateRouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"InstanceId" : { "Ref" : "SquidInstance" }
			}
		},
		"PrivateRouteTableSubnetAssociation": {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "PrivateSubnet" },
				"RouteTableId" : { "Ref" : "PrivateRouteTable" }
			}
		},
	    "EC2InstanceProfile": {
	      "Type": "AWS::IAM::InstanceProfile",
	      "Properties": {
	        "Roles": [ { "Ref": "EC2Role" } ],
	        "Path": "/"
	      }
	    },
	    "EC2Role": {
	      "Type": "AWS::IAM::Role",
	      "Properties": {
	        "AssumeRolePolicyDocument": {
	          "Version": "2012-10-17",
	          "Statement": [
	            {
	              "Effect": "Allow",
	              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
	              "Action": [ "sts:AssumeRole" ]
	            }
	          ]
	        },
	        "Path": "/",
	        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess" ]
	      }
	    },
		"SGIngressRule": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": { "Fn::GetAtt": [ "VPC", "DefaultSecurityGroup" ] },
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"CidrIp" : "0.0.0.0/0"
            }
		},
		"SquidInstance": {
		   "Type" : "AWS::EC2::Instance",
		   "Properties" : {
				"ImageId" : { "Fn::FindInMap": [ "RegionMap", { "Ref" : "AWS::Region" }, "64"] },
				"InstanceType" : "t2.micro",
				"KeyName" : { "Ref": "MyKeyPair" },
				"SecurityGroupIds" : [ { "Fn::GetAtt": [ "VPC", "DefaultSecurityGroup" ] } ],
				"SubnetId" : { "Ref": "PublicSubnet" },
				"SourceDestCheck": "False",
				"Tags": [
		      		{
		      			"Key": "Name",
		      			"Value": "Squid Instance"
		      		}
				],
				"UserData": { "Fn::Base64" : { "Fn::Join" : ["\n", [
		      		"#!/bin/bash",
		      		"yum update -y",
		      		"yum install -y perl gcc autoconf automake make sudo wget gcc-c++ libxml2-devel libcap-devel libtool libtool-ltdl-devel openssl openssl-devel",
		      		"SQUID_ARCHIVE=http://www.squid-cache.org/Versions/v3/3.5/squid-3.5.13.tar.gz",
					"cd /tmp",
					"wget $SQUID_ARCHIVE",
					"tar xvf squid*.tar.gz",
					"cd $(basename squid*.tar.gz .tar.gz)",
					"./configure --prefix=/usr --exec-prefix=/usr --libexecdir=/usr/lib64/squid --sysconfdir=/etc/squid --sharedstatedir=/var/lib --localstatedir=/var --libdir=/usr/lib64 --datadir=/usr/share/squid --with-logdir=/var/log/squid --with-pidfile=/var/run/squid.pid --with-default-user=squid --disable-dependency-tracking --enable-linux-netfilter --with-openssl --without-nettle",
					"make",
					"make install",
					"adduser -M squid",
					"chown -R squid:squid /var/log/squid /var/cache/squid",
					"chmod 750 /var/log/squid /var/cache/squid",
					"touch /etc/squid/squid.conf",
					"chown -R root:squid /etc/squid/squid.conf",
					"chmod 640 /etc/squid/squid.conf",
					"cat | tee /etc/init.d/squid <<'EOF'",
					"#!/bin/sh",
					"# chkconfig: - 90 25",
					"echo -n 'Squid service'",
					"case \"$1\" in",
					"start)",
					"/usr/sbin/squid",
					";;",
					"stop)",
					"/usr/sbin/squid -k shutdown",
					";;",
					"reload)",
					"/usr/sbin/squid -k reconfigure",
					";;",
					"*)",
					"echo \"Usage: `basename $0` {start|stop|reload}\"",
					";;",
					"esac",
					"EOF",
					"chmod +x /etc/init.d/squid",
					"chkconfig squid on",
					"mkdir /etc/squid/ssl",
					"cd /etc/squid/ssl",
					"openssl genrsa -out squid.key 2048",
					"openssl req -new -key squid.key -out squid.csr -subj \"/C=XX/ST=XX/L=squid/O=squid/CN=squid\"",
					"openssl x509 -req -days 3650 -in squid.csr -signkey squid.key -out squid.crt",
					"cat squid.key squid.crt | tee squid.pem",
					"cat | tee /etc/squid/squid.conf <<EOF",
					"visible_hostname squid",
					"#Handling HTTP requests",
					"http_port 3129 intercept",
					"acl allowed_http_sites dstdomain .amazonaws.com",
					"#acl allowed_http_sites dstdomain [you can add other domains to permit]",
					"http_access allow allowed_http_sites",
					"#Handling HTTPS requests",
					"https_port 3130 cert=/etc/squid/ssl/squid.pem ssl-bump intercept",
					"acl SSL_port port 443",
					"http_access allow SSL_port",
					"acl allowed_https_sites ssl::server_name .amazonaws.com",
					"#acl allowed_https_sites ssl::server_name [you can add other domains to permit]",
					"acl step1 at_step SslBump1",
					"acl step2 at_step SslBump2",
					"acl step3 at_step SslBump3",
					"ssl_bump peek step1 all",
					"ssl_bump peek step2 allowed_https_sites",
					"ssl_bump splice step3 allowed_https_sites",
					"ssl_bump terminate step2 all",
					"http_access deny all",
					"EOF",
					"iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 3129",
					"iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-port 3130",
					"service iptables save",
					"service squid start",
					{ "Fn::Join" : ["", [ "/opt/aws/bin/cfn-signal -e 0 --stack ", { "Ref" : "AWS::StackName" }, " --resource SquidInstance --region ", { "Ref" : "AWS::Region" } ] ] },
					""
				]]}}
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Timeout" : "PT20M"
				}
			}
		},
		"TestingInstance": {
		   "Type" : "AWS::EC2::Instance",
		   "Properties" : {
		   		"IamInstanceProfile" : { "Ref": "EC2InstanceProfile" },
				"ImageId" : { "Fn::FindInMap": [ "RegionMap", { "Ref" : "AWS::Region" }, "64"] },
				"InstanceType" : "t2.micro",
				"KeyName" : { "Ref": "MyKeyPair" },
				"SecurityGroupIds" : [ { "Fn::GetAtt": [ "VPC", "DefaultSecurityGroup" ] } ],
				"SubnetId" : { "Ref": "PrivateSubnet" },
				"Tags": [
		      		{
		      			"Key": "Name",
		      			"Value": "Testing Instance"
		      		}
				]
		   }
		}
	}
}
